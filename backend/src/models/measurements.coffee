Promise = require 'bluebird'
moment = require 'moment'
_ = require 'lodash'

app = null
mongo = null
collection = null
utility = null
db = {}

self = exports

############################################

self.name = 'models/measurements'

self.attach = (opts) ->
  app = this

self.init = (done) ->
  mongo = app.plugins['database/mongo']
  utility = app.plugins['utility']

  app.on 'mongo::initialized', ->
    db.measurements = mongo.db.collection 'measurements'
    db['measurements-30s'] = mongo.db.collection 'measurements-30s'
    db['measurements-5m'] = mongo.db.collection 'measurements-5m'
    db['measurements-hourly'] = mongo.db.collection 'measurements-hourly'
    db['measurements-daily'] = mongo.db.collection 'measurements-daily'
    listenForData()

  done()

self.create = (measurement, callback) ->
  db.measurements.insert measurement, callback 

self.find = (query, callback) ->
  db.measurements.find(query).toArray callback

self.findAggregated = (agg, query, callback) ->
  db["measurements-#{agg}"].find(query).toArray callback

self.getEndpointsInDatabase = (callback) ->
  db['measurements-daily'].distinct '_id.ep', null, callback

self.getResourcesInDatabase = (endpoint, callback) ->
  db['measurements-daily'].distinct '_id.path', 
    '_id.ep': endpoint
  , callback

Promise.promisifyAll self

############################################

listenForData = ->
  app.on 'events::notification', (data) ->
    return unless data?.notifications?.length

    # Not saving the timestamp since it'll be in the ObjectID generated by
    # MongoDB.

    Promise.map data.notifications, (measurement) ->
      value = utility.decryptBase64 measurement.payload
      value = parseFloat(value)

      self.createAsync 
        ep: measurement.ep
        path: measurement.path
        value: value
